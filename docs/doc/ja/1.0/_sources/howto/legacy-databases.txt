.. _howto-legacy-databases:

=====================================
古いデータベースを Django に組み込む
=====================================

:revision-up-to: 8961 (1.0)

Django が最も得意とするのは新たなアプリケーションですが、古いデータベースの
組み込みも可能です。 Django には組み込み作業を可能な限り自動化するための二
つのユーティリティが付属しています。

このドキュメントでは、読者は :ref:`公式チュートリアル <intro-tutorial01>`
のカバーしている Django の基礎を良く知っているものと仮定しています。

.. _Give Django your database parameters:

Django にデータベースパラメタを指定する
=======================================

まず、データベースへの接続パラメタとデータベース名を Django に指示する必要
があります。 :ref:`設定ファイル <topics-settings>` の以下の設定を編集してく
ださい:

    * :setting:`DATABASE_NAME`
    * :setting:`DATABASE_ENGINE`
    * :setting:`DATABASE_USER`
    * :setting:`DATABASE_PASSWORD`
    * :setting:`DATABASE_HOST`
    * :setting:`DATABASE_PORT`

.. _Auto-generate the models:

モデルの自動生成
================

Django には、既存のデータベースにイントロスペクションを行ってモデルを生成で
きるコマンド、 :djadmin:`inspectdb` が付属しています。出力を見るには以下の
コマンドを実行します:

.. code-block:: bash

    python manage.py inspectdb

標準の Unix 出力リダイレクションを使って、この内容をファイルに保存しておき
ます:

.. code-block:: bash

    python manage.py inspectdb > appname.py

この機能はショートカット目的で、正しいモデル生成を行うためのものではありま
せん。詳しくは :djadmin:`django-admin.py のドキュメント <inspectdb>` を参照
してください。

モデルを削除し終えたら、モジュールをアプリケーションの ``models.py`` 
に入れ、アプリケーションを収めているパッケージ内に配置し、
:setting:`INSTALLED_APPS` 設定にアプリケーションを追加しておきます。

.. _Install the core Django tables:

Django のコアデータテーブルのインストール
=========================================

次に、 :djadmin:`syncdb` コマンドを実行して、 Django のコアデータテーブルを
データベースにインストールします:

.. code-block:: bash

    python manage.py syncdb


.. _Test and tweak:

テストと確認
=============

ここまでで解説したのは基本です。この後は、生成したモデルが正しく動作するま
で変更してゆく必要があるでしょう。 Django データベース API を使ってアプリケー
ションのデータにアクセスしたり、 Django admin サイトでオブジェクトを編集し
てみたりしてください。


