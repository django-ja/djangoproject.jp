.. _ref-contrib-index:

=============================
"django.contrib" 下のアドオン
=============================

:revision-up-to: 8961 (1.0)

Django は Python の `"batteries included" 哲学`_ を目指しています。 Django
には Web 開発における課題を解くための様々な外部オプションツールがついてきま
す。

これらのコードは Django 配布物中の ``django/contrib`` にあります。このドキュ
メントでは、 ``contrib`` 下のパッケージをざっと解説し、パッケージを利用する
ときに必要な依存関係について説明します。

.. admonition:: Note

    これらのアドオンの大半、特にモデルやテンプレートタグの定義が入っている
    アドオンを使うには、パッケージ名 (例えば ``'django.contrib.admin'``) を
    ``INSTALLED_APPS`` 設定に追加して、 ``manage.py syncdb`` を再度実行する
    必要があります。

.. _`"batteries included" 哲学`: http://python.jp/doc/release/tut/node12.html#batteries-included                                                

.. toctree::
   :maxdepth: 1

   admin
   auth
   comments/index
   contenttypes
   csrf
   databrowse
   flatpages
   formtools/index
   humanize
   localflavor
   redirects
   sitemaps
   sites
   syndication
   webdesign

admin
=====

Django の自動化管理インタフェースです。詳しくは
:ref:`チュートリアルその 2 <intro-tutorial02>` と
:ref:`admin のドキュメント <ref-contrib-admin>` を参照してください。

auth_ および contenttypes_ パッケージをインストールしておく必要があります。

auth
====

Django の認証フレームワークです。詳しくは :ref:`topics-auth` を参照して下さ
い。

comments
========

.. versionchanged:: 1.0
   comments アプリケーションは書き直されました。アップグレード方法は
   :ref:`ref-contrib-comments-upgrade` を参照してください。

:ref:`ref-contrib-comments-index` を参照してください。

contenttypes
============

コンテンツの「タイプ」をフックしするための軽量フレームワークです。
コンテンツタイプは、インストールされている Django の個々のモデルを指します。

:ref:`contenttypes のドキュメント <ref-contrib-contenttypes>` を参照してください。

csrf
====

クロスサイトリクエストフォージェリ (Cross Site Request Forgeries) を阻止す
るためのミドルウェアです。

:ref:`csrf のドキュメント <ref-contrib-csrf>` を参照してください。


flatpages
=========

「フラット (flat) な」 HTML コンテンツをデータベースで扱うためのフレームワー
クです。

:ref:`flatpages のドキュメント <ref-contrib-flatpages>` を参照してください。

sites_ パッケージもインストールしておく必要があります。

formtools
=========

Django の新しいフォーム (django.forms) に対する高水準の抽象化インタフェー
スです。

django.contrib.formtools.preview
--------------------------------

「 HTML フォームを表示し、必ずプレビューを行ってからフォームデータを提出す
る」というワークフローを抽象化したものです。

:ref:`フォームプレビューのドキュメント <ref-contrib-formtools-form-preview>`
を参照してください。

django.contrib.formtools.wizard
--------------------------------

フォームを複数の Web ページにわたるように分割します。

:ref:`フォームウィザードのドキュメント <ref-contrib-formtools-form-wizard>`
を参照してください。

humanize
========

データに「人間くささ (human touch)」を与えるための Django テンプレートフィ
ルタです。

これらのフィルタを有効にするには、 :setting:`INSTALLED_APPS` 設定に
``'django.contrib.humanize'`` を加えます。インストール後、テンプレート上で
``{% load humanize %}`` を呼び出せば、以下のフィルタを利用できるようになり
ます:

:ref:`humanize のドキュメント <ref-contrib-humanize>` を参照してください。

localflavor
===========

特定の国や文化でのみ有用な Django の短いコード (snippet) を集めたものです。
例えば、 ``django.contrib.localflavor.us.forms`` には、米国の郵便番号
(U.S. zip code) を検証するための ``USZipCodeField`` が入っています。

:ref:`localflavor のドキュメント <ref-contrib-localflavor>` を参照してくだ
さい。

.. _ref-contrib-markup:

markup
======

テンプレートフィルタのコレクションです。以下の 3 つのマークアップ言語に対す
るフィルタを実装しています:

    * ``textile`` -- `Textile`_ 用の実装です
    * ``markdown``  -- `Markdown`_ 用の実装です
    * ``restructuredtext`` -- `ReST (ReStructured Text)`_ 用の実装です

どのフィルタも、各マークアップ言語で書かれたテキストの入った文字列を引数に
とり、マークアップ処理済みのテキストの入った文字列を返します。例えば、
``textile`` フィルタは Textile フォーマットで書かれたテキストを HTML に変換
します。

フィルタを有効にするには、 ``'django.contrib.markup'`` を
:setting:`INSTALLED_APPS` 設定に追加します。その上で ``{% load markup %}``
をテンプレートに追加すれば、フィルタを使えるようになります。詳細は
``django/contrib/markup/templatetags/markup.py`` のソースコードを参
照してください。

.. _Textile: http://en.wikipedia.org/wiki/Textile_%28markup_language%29
.. _Markdown: http://en.wikipedia.org/wiki/Markdown
.. _ReST (ReStructured Text): http://en.wikipedia.org/wiki/ReStructuredText

redirects
=========

リダイレクトを管理するためのフレームワークです。

:ref:`redirects のドキュメント <ref-contrib-redirects>` を参照してください。

sessions
========

セッション管理のためのフレームワークです。

:ref:`セッションのドキュメント <topics-http-sessions>` を参照してください。

sites
=====

一つのデータベースと Django を使って複数のウェブサイトを操作できるようにす
るための軽量フレームワークです。このフレームワークを使うと、オブジェクトを
特定の (一つまたは複数の) サイトに関連づけできます。

:ref:`sites のドキュメント <ref-contrib-sites>` を参照してください。

sitemaps
========

Google サイトマップ XML ファイルを生成するためのフレームワークです。

:ref:`sitemaps のドキュメント <ref-contrib-sitemaps>` を参照してください。

syndication
===========

RSS および Atom 形式の配信フィード (syndication feed) をごく簡単に生成する
ためのフレームワークです。

:ref:`配信フィードフレームワークのドキュメント <ref-contrib-syndication>`
を参照してください。

webdesign
=========

Web の *開発者* ではなく *デザイナ* のためのヘルパやユーティリティです。

:ref:`webdesign のドキュメント <ref-contrib-webdesign>` を参照してください。


その他のアドオン
=================

``contrib`` に入れたらよいと思う機能について何かアイデアがあるなら、是非教
えて下さい! コードを書いて、 `django-users mailing list`_ に送って下さい。

.. _django-users mailing list: http://groups.google.com/group/django-users
